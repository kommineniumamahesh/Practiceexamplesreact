Sure, I can help you with an example of a tree view with drag and drop functionality in React. 

To implement this, you can make use of React DnD (Drag and Drop) library along with a tree component. Hereâ€™s an example:

Step 1: Install React DnD using npm or yarn:
```
npm install react-dnd react-dnd-html5-backend
```

Step 2: Create a new React component called TreeView:
```jsx
import React from 'react';
import { useDrag, useDrop } from 'react-dnd';
import update from 'immutability-helper';

const ItemTypes = {
  NODE: 'node',
};

const TreeNode = ({ node, depth, handleDrag, handleDrop }) => {
  const [{ isDragging }, drag] = useDrag({
    item: { type: ItemTypes.NODE, id: node.id },
    collect: (monitor) => ({
      isDragging: monitor.isDragging(),
    }),
    begin: () => handleDrag(node),
  });

  const [{ isOver }, drop] = useDrop({
    accept: ItemTypes.NODE,
    drop: (droppedNode) => handleDrop(droppedNode.id, node.id),
    collect: (monitor) => ({
      isOver: monitor.isOver(),
    }),
  });

  const style = {
    cursor: 'move',
    opacity: isDragging ? 0.5 : 1,
    background: isOver ? 'lightgreen' : 'none',
  };

  return (
    <div
      ref={drop}
      style={{ marginLeft: depth * 20 }}
    >
      <div ref={drag} style={style}>
        {node.name}
      </div>
      {node.children && node.children.map((child) => (
        <TreeNode
          key={child.id}
          node={child}
          depth={depth + 1}
          handleDrag={handleDrag}
          handleDrop={handleDrop}
        />
      ))}
    </div>
  );
};

const TreeView = ({ treeData, handleDrag, handleDrop }) => (
  <div>
    {treeData.map((node) => (
      <TreeNode
        key={node.id}
        node={node}
        depth={0}
        handleDrag={handleDrag}
        handleDrop={handleDrop}
      />
    ))}
  </div>
);

export default TreeView;
```

Step 3: Use the TreeView component in your application:
```jsx
import React, { useState } from 'react';
import TreeView from './TreeView';

const App = () => {
  // This can be your initial tree data
  const [treeData, setTreeData] = useState([
    {
      id: 1,
      name: 'Node 1',
      children: [
        {
          id: 2,
          name: 'Node 1.1',
        },
        {
          id: 3,
          name: 'Node 1.2',
          children: [
            {
              id: 4,
              name: 'Node 1.2.1',
            },
          ],
        },
      ],
    },
  ]);

  const handleDrag = (node) => {
    // Handle node drag
    console.log('Dragged node:', node);
  };

  const handleDrop = (droppedNodeId, targetNodeId) => {
    // Update the treeData state based on the drop
    const updatedTreeData = update(treeData, {
      $apply: (nodes) => moveNode(nodes, droppedNodeId, targetNodeId),
    });
    setTreeData(updatedTreeData);
  };

  const moveNode = (nodes, droppedNodeId, targetNodeId) => {
    // Function to move the dragged node to the target node
    // You can implement your own logic here
    // In this example, we assume a flat array structure
    const draggedNode = nodes.find((node) => node.id === droppedNodeId);
    const targetNode = nodes.find((node) => node.id === targetNodeId);

    if (draggedNode && targetNode) {
      const draggedNodeIndex = nodes.indexOf(draggedNode);
      const targetNodeIndex = nodes.indexOf(targetNode);

      return update(nodes, {
        $splice: [
          [draggedNodeIndex, 1],
          [targetNodeIndex, 0, draggedNode],
        ],
      });
    }

    return nodes;
  };

  return (
    <div>
      <h2>Tree View</h2>
      <TreeView
        treeData={treeData}
        handleDrag={handleDrag}
        handleDrop={handleDrop}
      />
    </div>
  );
};

export default App;
```

In this example, we are using the `useDrag` and `useDrop` hooks from the React DnD library to create draggable and droppable nodes. The `handleDrag` and `handleDrop` functions are called when a node is dragged and dropped.

Feel free to modify the code according to your specific needs and add styles as per your requirements.
